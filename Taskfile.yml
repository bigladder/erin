version: '3'

vars:
  PYTHON:
    sh: if command -v python &> /dev/null; then which python; else which python3; fi

tasks:
  python:
    cmds:
      - echo {{.PYTHON}}

  docker-build:
    desc: Builds a Docker container with useful utilities for project work
    cmds:
      - if [ -z "$(docker images -q format:ver18 2> /dev/null)" ]; then docker buildx build -t format:ver18 .; fi

  docker-format:
    desc: Use docker to run clang-format
    deps: ["docker-build"]
    cmds:
      - docker run -it --rm --mount type=bind,source="$(pwd)",target=/app format:ver18

  docker-format-version:
    desc: Get the version of clang-format in use
    deps: ["docker-build"]
    cmds:
      - docker run -it --rm --mount type=bind,source="$(pwd)",target=/app format:ver18 clang-format --version

  format:
    desc: Run local clang-format over all project files
    cmds:
      - clang-format -i -style=file src/*.cpp include/**/*.h test/*.cpp apps/*.cpp

  checkfmt:
    desc: Check if there are any formatting problems
    cmds:
      - clang-format --dry-run --Werror src/*.cpp
      - clang-format --dry-run --Werror include/**/*.h
      - clang-format --dry-run --Werror test/*.cpp
      - clang-format --dry-run --Werror apps/**/*.h

  init:
    desc: Initialize the build directory
    cmds:
      - mkdir build
      - cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DERIN_TESTING=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=1

  build:
    desc: (Re)build the application
    cmds:
      - cmake --build build --config Debug -j 4

  test:
    desc: Run the test suite
    dir: 'docs/examples'
    cmds:
      # TODO[mok]: have regress.py take the build directory to run against
      - "{{.PYTHON}} regress.py"

  short-test:
    desc: Run the test suite, skipping long-running tests
    dir: 'docs/examples'
    cmds:
      - "{{.PYTHON}} regress.py"
    env:
      ERIN_SHORT_TEST: 1

  init-release:
    desc: Initialize a release build
    cmds:
      - mkdir build
      - cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DERIN_TESTING=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=1

  build-release:
    desc: Make a release build
    cmds:
      - cmake --build build --config Release -j 4

  ex:
    desc: Run the given exercise. Pass '-- run ex29.toml' to run example 29
    dir: 'docs/examples'
    cmds:
      - ../../build/bin/erin {{.CLI_ARGS}}

  db:
    desc: Runs the current exercise. Pass '-- run ex29.toml' to debug example 29
    dir: 'docs/examples'
    cmds:
      - lldb ../../build/bin/erin run {{.CLI_ARGS}}

  bench:
    desc: Runs benchmarks using hyperfine.
    dir: 'docs/examples/ft-illinois'
    cmds:
      - hyperfine --warmup 2 '{{.ERIN}} run exft-illinois.toml' --export-markdown ../../../benchmark-{{.ISO_DATE}}-{{.GIT_COMMIT}}.md --export-json ../../../benchmark-{{.ISO_DATE}}-{{.GIT_COMMIT}}.json --export-csv ../../../benchmark-{{.ISO_DATE}}-{{.GIT_COMMIT}}.csv
    vars:
      ERIN: "../../../build/bin/erin"
      GIT_COMMIT:
        sh: git rev-parse --short HEAD
      ISO_DATE:
        sh: date +"%Y-%m-%dT%H%M%S%z"

  bench-win:
    desc: Runs benchmarks using hyperfine on Windows.
    dir: 'docs/examples/ft-illinois'
    cmds:
      - hyperfine --warmup 2 '{{.ERIN}} run exft-illinois.toml' --export-markdown ..\\..\\..\\benchmark-{{.ISO_DATE}}-{{.GIT_COMMIT}}.md --export-json ..\\..\\..\\benchmark-{{.ISO_DATE}}-{{.GIT_COMMIT}}.json --export-csv ..\\..\\..\\benchmark-{{.ISO_DATE}}-{{.GIT_COMMIT}}.csv
    vars:
      ERIN: "..\\..\\..\\build\\bin\\Release\\erin.exe"
      GIT_COMMIT:
        sh: git rev-parse --short HEAD
      ISO_DATE:
        sh: date +"%Y-%m-%dT%H%M%S%z"

  copyout:
    desc: Copies the last run out.csv file to be the next reference for the given example. Provide example number such as `-- 01`.
    dir: 'docs/examples'
    cmds:
      - cp out.csv ex{{.CLI_ARGS}}-out.csv

  copystats:
    desc: Copies the last run stats.csv file to be the next reference for the given example. Provide example number such as `-- 01`.
    dir: 'docs/examples'
    cmds:
      - cp stats.csv ex{{.CLI_ARGS}}-stats.csv
