<%#INITIALIZE
# File IO
parameter "component_failure_mode_csv_path", :default=>"component-failure-mode.csv"
parameter "component_fragility_csv_path", :default=>"component-fragility.csv"
parameter "converter_component_csv_path", :default=>"converter-component.csv"
parameter "damage_intensity_csv_path", :default=>"damage-intensity.csv"
parameter "dual_outflow_converter_comp_csv", :default=>"dual-outflow-converter-comp.csv"
parameter "failure_mode_csv_path", :default=>"failure-mode.csv"
parameter "dist_type_csv_path", :default=>"dist-type.csv"
parameter "fixed_dist_csv_path", :default=>"fixed-dist.csv"
parameter "uniform_dist_csv_path", :default=>"uniform-dist.csv"
parameter "normal_dist_csv_path", :default=>"normal-dist.csv"
parameter "weibull_dist_csv_path", :default=>"weibull-dist.csv"
parameter "quantile_dist_csv_path", :default=>"quantile-dist.csv"
parameter "fragility_curve_csv_path", :default=>"fragility-curve.csv"
parameter "general_csv_path", :default=>"general.csv"
parameter "load_component_csv_path", :default=>"load-component.csv"
parameter "load_profile_csv_path", :default=>"load-profile.csv"
parameter "mover_component_csv_path", :default=>"mover-component.csv"
parameter "network_link_csv_path", :default=>"network-link.csv"
parameter "pass_through_component_csv_path", :default=>"pass-through-component.csv"
parameter "scenario_csv_path", :default=>"scenario.csv"
parameter "source_component_csv_path", :default=>"source-component.csv"
parameter "storage_component_csv_path", :default=>"storage-component.csv"
parameter "uncontrolled_src_csv_path", :default=>"uncontrolled-src.csv"
parameter "expand_load_paths", :default=>true
%>
<%
   require 'set'
   require_relative 'support.rb'
   THIS_DIR = Support.get_script_directory
   data = {}
   Dir.chdir(THIS_DIR) do
     data[:component_failure_mode] = Support.load_csv(component_failure_mode_csv_path)
     data[:component_fragility] = Support.load_csv(component_fragility_csv_path)
     data[:converter_component] = Support.load_csv(converter_component_csv_path)
     data[:damage_intensity] = Support.load_csv(damage_intensity_csv_path)
     data[:dual_outflow_converter_comp] = Support.load_csv(dual_outflow_converter_comp_csv)
     data[:failure_mode] = Support.load_csv(failure_mode_csv_path)
     data[:dist_type] = Support.load_csv(dist_type_csv_path)
     data[:fixed_dist] = Support.load_csv(fixed_dist_csv_path)
     data[:uniform_dist] = Support.load_csv(uniform_dist_csv_path)
     data[:normal_dist] = Support.load_csv(normal_dist_csv_path)
     data[:weibull_dist] = Support.load_csv(weibull_dist_csv_path)
     data[:quantile_dist] = Support.load_csv(quantile_dist_csv_path)
     data[:fragility_curve] = Support.load_csv(fragility_curve_csv_path)
     data[:general] = Support.load_key_value_csv(general_csv_path)
     data[:load_component] = Support.load_csv(load_component_csv_path)
     data[:load_profile] = Support.load_csv(load_profile_csv_path)
     data[:mover_component] = Support.load_csv(mover_component_csv_path)
     data[:network_link] = Support.load_csv(network_link_csv_path)
     data[:pass_through_component] = Support.load_csv(pass_through_component_csv_path)
     data[:scenario] = Support.load_csv(scenario_csv_path)
     data[:source_component] = Support.load_csv(source_component_csv_path)
     data[:storage_component] = Support.load_csv(storage_component_csv_path)
     data[:uncontrolled_src] = Support.load_csv(uncontrolled_src_csv_path)
   end
   if expand_load_paths
     s = Support.new(data, THIS_DIR)
   else
     s = Support.new(data)
   end
%>
############################################################
# General Simulation Information
[simulation_info]
rate_unit = "kW"
quantity_unit = "kJ"
time_unit = "years"
<% if data.fetch(:general).fetch(:random_setting).strip.downcase == "seed" %>
random_seed = <%= data.fetch(:general).fetch(:random_seed).to_i %> # ...
<% end %>
max_time = <%= data.fetch(:general).fetch(:simulation_duration_in_years) %> # ...
############################################################
# Load Profiles
<% s.load_profile.each do |lp| %>
[loads.<%= lp.fetch(:id) %>]
csv_file = "<%= lp.fetch(:file) %>"
<% end %>
############################################################
# Components
<% s.source_component.each do |c| %>
[components.<%= c.fetch(:id) %>]
type = "source"
outflow = "<%= c.fetch(:outflow) %>"
<%   if c[:is_limited].strip.downcase == "true" %>
max_outflow = <%= c.fetch(:max_outflow_kW) %> # ...
<%   end %>
<%   fms = s.failure_modes_for_component(c.fetch(:id)) %>
<%   if fms.length > 0 %>
failure_modes = [<%= fms.map {|fm| "\"#{fm.fetch(:id)}\""}.join(", ") %>]
<%   end %>
<%   fs = s.fragilities_for_component(c.fetch(:id)) %>
<%   if fs.length > 0 %>
fragilities = [<%= fs.map {|f| "\"#{f.fetch(:id)}\""}.join(", ") %>]
<%   end %>
<% end %>
<% s.uncontrolled_src.each do |c| %>
[components.<%= c.fetch(:id) %>]
type = "uncontrolled_source"
outflow = "<%= c.fetch(:outflow) %>"
<%   fms = s.failure_modes_for_component(c.fetch(:id)) %>
<%   if fms.length > 0 %>
failure_modes = [<%= fms.map {|fm| "\"#{fm.fetch(:id)}\""}.join(", ") %>]
<%   end %>
<%   fs = s.fragilities_for_component(c.fetch(:id)) %>
<%   if fs.length > 0 %>
fragilities = [<%= fs.map {|f| "\"#{f.fetch(:id)}\""}.join(", ") %>]
<%   end %>
<%   s.load_profile.each do |lp| %>
<%     next unless lp[:component_id] == c.fetch(:id) %>
supply_by_scenario.<%= lp.fetch(:scenario_id) %> = "<%= lp.fetch(:id) %>"
<%   end %>
<% end %>
<% s.load_component.each do |c| %>
[components.<%= c.fetch(:id) %>]
type = "load"
inflow = "<%= c.fetch(:inflow) %>"
<%   s.load_profile.each do |lp| %>
<%     next unless lp.fetch(:component_id) == c.fetch(:id) %>
loads_by_scenario.<%= lp.fetch(:scenario_id) %> = "<%= lp.fetch(:id) %>"
<%   end %>
<%   fms = s.failure_modes_for_component(c.fetch(:id)) %>
<%   if fms.length > 0 %>
failure_modes = [<%= fms.map {|fm| "\"#{fm.fetch(:id)}\""}.join(", ") %>]
<%   end %>
<%   fs = s.fragilities_for_component(c.fetch(:id)) %>
<%   if fs.length > 0 %>
fragilities = [<%= fs.map {|f| "\"#{f.fetch(:id)}\""}.join(", ") %>]
<%   end %>
<% end %>
<% s.converter_component.each do |c| %>
[components.<%= c.fetch(:id) %>]
type = "converter"
inflow = "<%= c.fetch(:inflow) %>"
outflow = "<%= c.fetch(:outflow) %>"
lossflow = "<%= c.fetch(:lossflow) %>"
constant_efficiency = <%= c.fetch(:constant_efficiency) %> # ...
<%   fms = s.failure_modes_for_component(c.fetch(:id)) %>
<%   if fms.length > 0 %>
failure_modes = [<%= fms.map {|fm| "\"#{fm[:id]}\""}.join(", ") %>]
<%   end %>
<%   fs = s.fragilities_for_component(c.fetch(:id)) %>
<%   if fs.length > 0 %>
fragilities = [<%= fs.map {|f| "\"#{f.fetch(:id)}\""}.join(", ") %>]
<%   end %>
<% end %>
<% s.storage_component.each do |c| %>
[components.<%= c.fetch(:id) %>]
type = "store"
inflow = "<%= c.fetch(:flow) %>"
outflow = "<%= c.fetch(:flow) %>"
capacity_unit = "kWh"
capacity = <%= c.fetch(:capacity_kWh).to_f %> # ...
max_inflow = <%= c.fetch(:max_inflow_kW).to_f %> # ...
<%   fms = s.failure_modes_for_component(c.fetch(:id)) %>
<%   if fms.length > 0 %>
failure_modes = [<%= fms.map {|fm| "\"#{fm.fetch(:id)}\""}.join(", ") %>]
<%   end %>
<%   fs = s.fragilities_for_component(c.fetch(:id)) %>
<%   if fs.length > 0 %>
fragilities = [<%= fs.map {|f| "\"#{f.fetch(:id)}\""}.join(", ") %>]
<%   end %>
<% end %>
<% s.mover_component.each do |c| %>
[components.<%= c.fetch(:id) %>]
type = "mover"
inflow0 = "<%= c.fetch(:flow_moved) %>"
inflow1 = "<%= c.fetch(:support_flow) %>"
outflow = "<%= c.fetch(:flow_moved) %>"
COP = <%= c.fetch(:cop) %> # ...
<%   fms = s.failure_modes_for_component(c.fetch(:id)) %>
<%   if fms.length > 0 %>
failure_modes = [<%= fms.map {|fm| "\"#{fm[:id]}\""}.join(", ") %>]
<%   end %>
<%   fs = s.fragilities_for_component(c[:id]) %>
<%   if fs.length > 0 %>
fragilities = [<%= fs.map {|f| "\"#{f[:id]}\""}.join(", ") %>]
<%   end %>
<% end %>
<% s.muxer_component.each do |c| %>
[components.<%= c.fetch(:id) %>]
type = "muxer"
stream = "<%= c.fetch(:flow) %>"
num_inflows = <%= c.fetch(:num_inflows) %> # ...
num_outflows = <%= c.fetch(:num_outflows) %> # ...
dispatch_strategy = "in_order"
<%   fms = s.failure_modes_for_component(c.fetch(:id)) %>
<%   if fms.length > 0 %>
failure_modes = [<%= fms.map {|fm| "\"#{fm.fetch(:id)}\""}.join(", ") %>]
<%   end %>
<%   fs = s.fragilities_for_component(c[:id]) %>
<%   if fs.length > 0 %>
fragilities = [<%= fs.map {|f| "\"#{f.fetch(:id)}\""}.join(", ") %>]
<%   end %>
<% end %>
<% s.pass_through_component.each do |c| %>
[components.<%= c.fetch(:id) %>]
type = "pass_through"
stream = "<%= c.fetch(:flow) %>"
<%   fms = s.failure_modes_for_component(c[:id]) %>
<%   if fms.length > 0 %>
failure_modes = [<%= fms.map {|fm| "\"#{fm[:id]}\""}.join(", ") %>]
<%   end %>
<%   fs = s.fragilities_for_component(c[:id]) %>
<%   if fs.length > 0 %>
fragilities = [<%= fs.map {|f| "\"#{f[:id]}\""}.join(", ") %>]
<%   end %>
<% end %>
############################################################
# Fragility Curves
<% s.fragility_curve.each do |fc| %>
[fragility.<%= fc.fetch(:id) %>]
vulnerable_to = "<%= fc.fetch(:vulnerable_to) %>"
type = "linear"
lower_bound = <%= fc.fetch(:lower_bound).to_f %> # ...
upper_bound = <%= fc.fetch(:upper_bound).to_f %> # ...
<% end %>
############################################################
# Distributions
<% s.dist_type.each do |dist_type| %>
[dist.<%= dist_type.fetch(:id) %>]
<% dist = s.dist_for_id(dist_type.fetch(:id)) %>
<% if dist_type.fetch(:dist_type) == "fixed" %>
type = "fixed"
value = <%= dist.fetch(:value_in_hours).to_f %> # ...
time_unit = "hours"
<% elsif dist_type.fetch(:dist_type) == "uniform" %>
type = "uniform"
lower_bound = <%= dist.fetch(:lower_bound_in_hours).to_f %> # ...
upper_bound = <%= dist.fetch(:upper_bound_in_hours).to_f %> # ...
time_unit = "hours"
<% elsif dist_type.fetch(:dist_type) == "normal" %>
type = "normal"
mean = <%= dist.fetch(:mean_in_hours).to_f %> # ...
standard_deviation = <%= dist.fetch(:standard_deviation_in_hours).to_f %> # ...
time_unit = "hours"
<% elsif dist_type.fetch(:dist_type) == "weibull" %>
type = "weibull"
shape = <%= dist.fetch(:shape).to_f %> # ...
scale =  <%= dist.fetch(:scale_in_hours).to_f %> # ...
location = <%= dist.fetch(:location_in_hours).to_f %> # ...
time_unit = "hours"
<% elsif dist_type[:dist_type] == "quantile" %>
type = "quantile_table"
csv_file = "<%= dist.fetch(:csv_file) %>"
<% else %>
<% raise "Unhandled distribution type #{dist_type.fetch(:dist_type)}" %>
<% end %>
<% end %>
############################################################
# Failure Modes
<% s.failure_mode.each do |fm| %>
[failure_mode.<%= fm.fetch(:id) %>]
failure_dist = "<%= fm.fetch(:failure_dist) %>"
repair_dist = "<%= fm.fetch(:repair_dist) %>"
<% end %>
############################################################
# Networks
[networks.nw]
connections = [
<% s.connections.each do |conn| %>
  ["<%= conn[0] %>", "<%= conn[1] %>", "<%= conn[2] %>"],
<% end %>
  ]
############################################################
# Scenarios
<% s.scenario.each do |scen| %>
[scenarios.<%= scen[:id] %>]
time_unit = "hours"
occurrence_distribution = "<%= scen[:occurrence_distribution] %>"
duration = <%= scen[:duration_in_hours].to_i %> # ...
max_occurrences = <%= scen[:max_occurrence].to_i %> # ...
<%   if scen[:calc_reliability].strip.downcase == "true" %>
calculate_reliability = true
<%   else %>
calculate_reliability = false
<%   end %>
network = "nw"
<%   s.damage_intensities_for_scenario(scen[:id]).each do |di| %>
intensity.<%= di[:name] %> = <%= di[:value] %> # ...
<%   end %>
<% end %>
