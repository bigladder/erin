<%#INITIALIZE
# General
parameter "simulation_duration_in_years", :default=>100
parameter "random_setting", :default=>"Auto" # "Auto" | "Seed"
parameter "random_seed", :default=>17
# Load Profile
parameter "load_profile_building_id", :default=>["mc", "mc", "other", "other"]
parameter "load_profile_scenario_id", :default=>["blue_sky", "class_4_hurricane"]
parameter "load_profile_enduse", :default=>["electrical", "electrical", "electrical", "electrical"]
parameter "load_profile_file", :default=>["mc_blue_sky_electrical.csv", "mc_class_4_hurricane_electrical.csv", "other_blue_sky_electrical.csv", "other_class_4_hurricane_electrical.csv"]
# Scenario
parameter "scenario_id", :default=>["blue_sky", "class_4_hurricane"]
parameter "scenario_duration_in_hours", :default=>[8760, 336]
parameter "scenario_max_occurrence", :default=>[1, -1]
parameter "scenario_fixed_frequency_in_years", :default=>[0, 30]
# Building Level
parameter "building_level_building_id", :default=>["mc", "other"]
parameter "building_level_egen_flag", :default=>["FALSE", "FALSE"]
parameter "building_level_egen_eff_pct", :default=>[38.0, 38.0]
parameter "building_level_egen_peak_pwr_kW", :default=>[100.0, 100.0]
parameter "building_level_heat_storage_flag", :default=>["FALSE", "FALSE"]
parameter "building_level_heat_storage_cap_kWh", :default=>[0.0, 0.0]
parameter "building_level_gas_boiler_flag", :default=>["FALSE", "FALSE"]
parameter "building_level_gas_boiler_eff_pct", :default=>[42.0, 42.0]
parameter "building_level_gas_boiler_peak_heat_gen_kW", :default=>[25.0, 25.0]
parameter "building_level_echiller_flag", :default=>["FALSE", "FALSE"]
parameter "building_level_echiller_peak_cooling_kW", :default=>[50.0, 50.0]
parameter "building_level_echiller_eff_pct", :default=>[540.0, 540.0]
%>
<%
  require 'set'

  def is_true(x)
    (x == true) || (x.to_s.downcase.strip == "true")
  end

  def equals(x, y)
    (x.to_s.downcase.strip == y.to_s.downcase.strip)
  end

  building_info = {}
  enduse_set = Set.new
  fuels_set = Set.new
  num_buildings = building_level_building_id.length
%>
[simulation_info]
rate_unit = "kW"
quantity_unit = "kJ"
time_unit = "years"
<% if equals(random_setting, "seed") %>
random_seed = <%= random_seed.to_i %>
<% end %>
max_time = <%= simulation_duration_in_years %>
############################################################
<% load_profile_building_id.each_with_index do |building_id, idx| %>
  <%
  s_id = load_profile_scenario_id[idx]
  enduse = load_profile_enduse[idx]
  enduse_set << enduse
  file = load_profile_file[idx]
  building_info[building_id] = {enduse => {s_id => file}} if !building_info.include?(building_id)
  building_info[building_id][enduse] = {s_id => file} if building_info.include?(building_id) && !building_info[building_id].include?(enduse)
  building_info[building_id][enduse][s_id] = file if building_info.include?(building_id) && building_info[building_id].include?(enduse) && !building_info[building_id][enduse].include?(s_id)
  %>
[loads.<%= building_id %>_<%= enduse %>_<%= s_id %>]
csv_file = "<%= load_profile_file[idx] %>"
<% end %>
############################################################
[components.electric_source]
type = "source"
outflow = "electricity"
<% if num_buildings > 1 %>
[components.building_level_electric_bus]
type = "muxer"
stream = "electricity"
num_inflows = 1
num_outflows = <%= num_buildings %>
<% end %>
<% building_info.keys.sort.each do |building_id| %>
  <% building_info[building_id].keys.sort.each do |enduse| %>
[components.<%= building_id %>_<%= enduse %>_load]
type = "load"
inflow = "<%= enduse %>"
    <% building_info[building_id][enduse].keys.sort.each do |s_id| %>
loads_by_scenario.<%= s_id %> = "<%= building_id %>_<%= enduse %>_<%= s_id %>"
    <% end %>
  <% end %>
<% end %>
############################################################
[networks.nw]
connections = [
  ["electric_source:OUT(0)", "building_level_electric_bus:IN(0)", "electricity"],
<% num_buildings.times do |n| %>
  ["building_level_electric_bus:OUT(<%= n %>)", "<%= building_level_building_id[n] %>_electrical_load:IN(0)", "electricity"],
<% end %>
  ]
############################################################
<% scenario_id.each_with_index do |s_id, idx| %>
[scenarios.<%= s_id %>]
time_unit = "hours"
occurrence_distribution = {type = "fixed", value = <%= (scenario_fixed_frequency_in_years[idx] * 8760).to_i %>, time_unit="hours"}
duration = <%= scenario_duration_in_hours[idx] %>
max_occurrences = <%= scenario_max_occurrence[idx].to_i %>
network = "nw"
<% end %>

