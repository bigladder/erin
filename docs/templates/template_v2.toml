<%#INITIALIZE
# File IO
parameter "converter_component_csv_path", :default=>"converter-component.csv"
parameter "fixed_cdf_csv_path", :default=>"fixed-cdf.csv"
parameter "general_csv_path", :default=>"general.csv"
parameter "load_component_csv_path", :default=>"load-component.csv"
parameter "load_profile_csv_path", :default=>"load-profile.csv"
parameter "network_link_csv_path", :default=>"network-link.csv"
parameter "scenario_csv_path", :default=>"scenario.csv"
parameter "source_component_csv_path", :default=>"source-component.csv"
parameter "storage_component_csv_path", :default=>"storage-component.csv"
parameter "expand_load_paths", :default=>false
%>
<%
   require 'set'
   require_relative 'supportv2.rb'
   THIS_DIR = File.dirname(__FILE__)
   data = {}
   Dir.chdir(THIS_DIR) do
     data[:converter_component] = Support.load_csv(converter_component_csv_path)
     data[:fixed_cdf] = Support.load_csv(fixed_cdf_csv_path)
     data[:general] = Support.load_key_value_csv(general_csv_path)
     data[:load_component] = Support.load_csv(load_component_csv_path)
     data[:load_profile] = Support.load_csv(load_profile_csv_path)
     data[:network_link] = Support.load_csv(network_link_csv_path)
     data[:scenario] = Support.load_csv(scenario_csv_path)
     data[:source_component] = Support.load_csv(source_component_csv_path)
     data[:storage_component] = Support.load_csv(storage_component_csv_path)
   end
   if expand_load_paths
     s = Support.new(data, THIS_DIR)
   else
     s = Support.new(data)
   end
%>
############################################################
# General Simulation Information
[simulation_info]
rate_unit = "kW"
quantity_unit = "kJ"
time_unit = "years"
<% if data[:general][:random_setting].strip.downcase == "seed" %>
random_seed = <%= data[:general][:random_seed].to_i %> # ...
<% end %>
max_time = <%= data[:general][:simulation_duration_in_years] %> # ...
############################################################
# Load Profiles
<% s.load_profile.each do |lp| %>
[loads.<%= lp[:id] %>]
csv_file = "<%= lp[:file] %>"
<% end %>
############################################################
# Components
<% s.source_component.each do |c| %>
[components.<%= c[:id] %>]
type = "source"
outflow = "<%= c[:outflow] %>"
<%   if c[:is_limited].strip.downcase == "true" %>
max_outflow = <%= c[:max_outflow_kW] %> # ...
<%   end %>
<% end %>
<% s.load_component.each do |c| %>
[components.<%= c[:id] %>]
type = "load"
inflow = "<%= c[:inflow] %>"
<%   data[:load_profile].each do |lp| %>
<%     next unless ( (lp[:building_id] == c[:location_id]) and %>
<%                   (c[:inflow] == lp[:enduse]) ) %>
loads_by_scenario.<%= lp[:scenario_id] %> = "<%= lp[:id] %>"
<%   end %>
<% end %>
<% s.converter_component.each do |c| %>
[components.<%= c[:id] %>]
type = "converter"
inflow = "<%= c[:inflow] %>"
outflow = "<%= c[:outflow] %>"
lossflow = "<%= c[:lossflow] %>"
constant_efficiency = <%= c[:constant_efficiency] %> # ...
<% end %>
<% s.storage_component.each do |c| %>
[components.<%= c[:id] %>]
type = "store"
inflow = "<%= c[:flow] %>"
outflow = "<%= c[:flow] %>"
capacity_unit = "kWh"
capacity = <%= c[:capacity_kWh] %> # ...
max_inflow = <%= c[:max_inflow_kW] %> # ...
<% end %>
<% s.muxer_component.each do |c| %>
[components.<%= c[:id] %>]
type = "muxer"
stream = "<%= c[:flow] %>"
num_inflows = <%= c[:num_inflows] %> # ...
num_outflows = <%= c[:num_outflows] %> # ...
dispatch_strategy = "in_order"
<% end %>
############################################################
# Fragility Curves
<% data.fetch(:fragility_curve, []).each do |fc| %>
[fragility.]
vulnerable_to = ""
type = "linear"
lower_bound = 2.0 # ...
upper_bound = 6.0 # ...
<% end %>
############################################################
# Cumulative Distribution Functions
<% s.fixed_cdf.each do |cdf| %>
[cdf.<%= cdf[:id] %>]
type = "fixed"
value = <%= cdf[:value_in_hours].to_f.round %> # ...
time_unit = "hours"
<% end %>
<% data.fetch(:uniform_cdf, []).each do |cdf| %>
[cdf.]
type = "uniform"
value = <%= 5 %> # ...
time_unit = "seconds"
<% end %>
############################################################
# Failure Modes
<% data.fetch(:failure_mode, []).each do |fm| %>
[failure_mode.]
failure_cdf = ""
repair_cdf = ""
<% end %>
############################################################
# Networks
[networks.nw]
connections = [
<% s.connections.each do |conn| %>
  ["<%= conn[0] %>", "<%= conn[1] %>", "<%= conn[2] %>"],
<% end %>
  ]
############################################################
# Scenarios
<% data[:scenario].each do |scen| %>
[scenarios.<%= scen[:id] %>]
time_unit = "hours"
<% cdf = s.cdf_for_id(scen[:occurrence_distribution]) %>
occurrence_distribution = {type = "<%= cdf[:type] %>", value = <%= cdf[:value_in_hours].to_f.round %>, time_unit="hours"}
duration = <%= scen[:duration_in_hours].to_i %> # ...
max_occurrences = <%= scen[:max_occurrence].to_i %> # ...
<%   if scen[:calc_reliability].strip.downcase == "true" %>
calculate_reliability = true
<%   else %>
calculate_reliability = false
<%   end %>
network = "nw"
<% end %>
